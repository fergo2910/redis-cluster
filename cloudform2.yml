AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template for RedisCluster_Chef: This template
  installs a Redis cluster consisting of 1 master and 3 slaves, it uses the AWS
  CloudFormation bootstrap scripts to deploy the Chef client and using Chef-client
  in local mode to configure the cluster.
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: Web Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the for x.x.x.x/x.
  SlaveNodeCapacity:
    Default: '1'
    Description: The initial number of slave nodes for the redis cluster
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-3353c649
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-58ce1220
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-62ad9502
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-f9dd458a
      HVMG2: ami-41bc0a38
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-886369ec
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      PV64: NOT_SUPPORTED
      HVM64: NOT_SUPPORTED
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-ea26ce85
      HVMG2: ami-b50d8fda
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-374db956
      HVMG2: ami-14e45872
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-2a80d649
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-02c42e60
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-f6165899
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-730ebd17
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      PV64: ami-80707be2
      HVM64: ami-cb858fa9
      HVMG2: NOT_SUPPORTED
Resources:
  PublicInstance1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a simple image upload service
      'AWS::CloudFormation::Init':
        configSets:
          chef_install:
            - install_cfn
            - install_chefdk
            - install_chef
#            - install_wordpress
            - run_chef
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets chef_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_chef:
          sources:
            /var/chef/chef-repo: 'http://github.com/opscode/chef-repo/tarball/master'
          files:
            /tmp/install.sh:
              source: 'https://www.opscode.com/chef/install.sh'
              mode: '000400'
              owner: root
              group: root
            /var/chef/chef-repo/.chef/knife.rb:
              content: !Join
                - ''
                - - |
                    cookbook_path [ '/var/chef/chef-repo/cookbooks' ]
                  - |
                    node_path [ '/var/chef/chef-repo/nodes' ]
              mode: '000400'
              owner: root
              group: root
            /var/chef/chef-repo/.chef/client.rb:
              content: !Join
                - ''
                - - |
                    cookbook_path [ '/var/chef/chef-repo/cookbooks' ]
                  - |
                    node_path [ '/var/chef/chef-repo/nodes' ]
              mode: '000400'
              owner: root
              group: root
          commands:
            01_make_chef_readable:
              command: chmod +rx /var/chef
            02_install_chef:
              command: bash /tmp/install.sh
              cwd: /var/chef
            03_create_node_list:
              command: chef-client -z -c /var/chef/chef-repo/.chef/client.rb
              cwd: /var/chef/chef-repo
              env:
                HOME: /var/chef
        install_chefdk:
          packages:
            rpm:
              chefdk: >-
                https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm
        # install_wordpress:
        #   files:
        #     /var/chef/chef-repo/.chef/knife.rb:
        #       content: !Join
        #         - ''
        #         - - >
        #             cookbook_path [
        #             '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]
        #           - |
        #             node_path [ '/var/chef/chef-repo/nodes' ]
        #       mode: '000400'
        #       owner: root
        #       group: root
        #     /var/chef/chef-repo/.chef/client.rb:
        #       content: !Join
        #         - ''
        #         - - >
        #             cookbook_path [
        #             '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]
        #           - |
        #             node_path [ '/var/chef/chef-repo/nodes' ]
        #       mode: '000400'
        #       owner: root
        #       group: root
        #     /var/chef/chef-repo/cookbooks/wordpress/attributes/aws_rds_config.rb:
        #       content: !Join
        #         - ''
        #         - - 'normal[''wordpress''][''db''][''pass''] = '''
        #           - !Ref DBPassword
        #           - |
        #             '
        #           - 'normal[''wordpress''][''db''][''user''] = '''
        #           - !Ref DBUser
        #           - |
        #             '
        #           - 'normal[''wordpress''][''db''][''host''] = '''
        #           - !GetAtt
        #             - DBInstance
        #             - Endpoint.Address
        #           - |
        #             '
        #           - 'normal[''wordpress''][''db''][''name''] = '''
        #           - !Ref DBName
        #           - |
        #             '
        #       mode: '000400'
        #       owner: root
        #       group: root
        #   commands:
        #     01_get_cookbook:
        #       command: knife cookbook site download wordpress
        #       cwd: /var/chef/chef-repo
        #       env:
        #         HOME: /var/chef
        #     02_unpack_cookbook:
        #       command: tar xvfz /var/chef/chef-repo/wordpress*
        #       cwd: /var/chef/chef-repo/cookbooks
        #     03_init_berkshelf:
        #       command: >-
        #         berks init /var/chef/chef-repo/cookbooks/wordpress
        #         --skip-vagrant --skip-git
        #       cwd: /var/chef/chef-repo/cookbooks/wordpress
        #       env:
        #         HOME: /var/chef
        #     04_vendorize_berkshelf:
        #       command: berks vendor
        #       cwd: /var/chef/chef-repo/cookbooks/wordpress
        #       env:
        #         HOME: /var/chef
        #     05_configure_node_run_list:
        #       command: >-
        #         knife node run_list add -z `knife node list -z`
        #         recipe[wordpress]
        #       cwd: /var/chef/chef-repo
        #       env:
        #         HOME: /var/chef
        run_chef:
          commands:
            01_run_chef_client:
              command: chef-client -z -c /var/chef/chef-repo/.chef/client.rb
              cwd: /var/chef/chef-repo
              env:
                HOME: /var/chef
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets chef_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable all traffic just for demonstrative purposes.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
